SPORT_KISS_VERSION=bit32.lshift(1,5)SPORT_KISS_STARTFLAG=bit32.lshift(1,4)LOCAL_SENSOR_ID=0x0D;REMOTE_SENSOR_ID=0x1B;REQUEST_FRAME_ID=0x30;REPLY_FRAME_ID=0x32;local a=0;local b=0;local c={}local d=1;local e=0;local f=false;local g=0;local function h()return getValue("RSSI")>0 end;local function i(j,k)local l=string.format("%0.4d",j)local m=string.sub(l,1,string.len(l)-3)local n=string.sub(string.sub(l,-3),1,k)if k>0 then return m.."."..n else return m end end;local function o(p,q,r)local s={}for t=q,r do s[#s+1]=p[t]end;return s end;local u={}local v=1;local w=0;local x=0;local function y(z)local A=0;A=z[1]+bit32.lshift(z[2],8)local B=0;B=z[3]+bit32.lshift(z[4],8)+bit32.lshift(z[5],16)+bit32.lshift(z[6],24)local C=sportTelemetryPush(LOCAL_SENSOR_ID,REQUEST_FRAME_ID,A,B)if C then x=x+1 end end;local function D()if#u==0 then return false end;if not sportTelemetryPush()then return true end;local z={}z[1]=a+SPORT_KISS_VERSION;a=bit32.band(a+1,0x0F)if v==1 then z[1]=z[1]+SPORT_KISS_STARTFLAG end;local t=2;while t<=6 do z[t]=u[v]v=v+1;t=t+1;if v>#u then break end end;if t<=6 then while t<=6 do z[t]=0;t=t+1 end;y(z)u={}v=1;return false else y(z)if v>#u then u={}v=1;return false else return true end end end;local function E(F,z)if#u~=0 then return nil end;local G=0;u[1]=bit32.band(F,0xFF)u[2]=bit32.band(#z,0xFF)for t=1,#z do u[t+2]=z[t]G=bit32.bxor(G,z[t])for t=1,8 do if bit32.band(G,0x80)~=0 then G=bit32.bxor(bit32.lshift(G,1),0xD5)else G=bit32.lshift(G,1)end;G=bit32.band(G,0xFF)end end;u[#z+3]=G;g=F;return D()end;local function H(z)local I=1;local J=z[I]local K=bit32.band(J,0x20)~=0;I=I+1;if K then f=false;return nil end;local L=bit32.band(J,0x10)~=0;local M=bit32.band(J,0x0F)if L then d=1;c={}kissRxSize=z[I+1]+3;e=0;f=true elseif not f then return nil elseif bit32.band(b+1,0x0F)~=M then f=false;return nil end;while I<=6 and d<=kissRxSize do c[d]=z[I]if d>2 and d<kissRxSize then e=bit32.bxor(e,z[I])for t=1,8 do if bit32.band(e,0x80)~=0 then e=bit32.bxor(bit32.lshift(e,1),0xD5)else e=bit32.lshift(e,1)end;e=bit32.band(e,0xFF)end end;d=d+1;I=I+1 end;if d<=kissRxSize then b=M;return true end;if kissRxSize>3 then if e~=c[kissRxSize]then f=false;return nil end end;f=false;return o(c,3,kissRxSize-1)end;local function N()while true do local O,P,A,B=sportTelemetryPop()if O==REMOTE_SENSOR_ID and P==REPLY_FRAME_ID then local z={}z[1]=bit32.band(A,0xFF)A=bit32.rshift(A,8)z[2]=bit32.band(A,0xFF)z[3]=bit32.band(B,0xFF)B=bit32.rshift(B,8)z[4]=bit32.band(B,0xFF)B=bit32.rshift(B,8)z[5]=bit32.band(B,0xFF)B=bit32.rshift(B,8)z[6]=bit32.band(B,0xFF)local C=H(z)if type(C)=="table"then return g,C end else break end end;return nil end;local Q=0x4D;local R=0x4E;local S=0x43;local T=0x44;local U=0x45;local V=0x46;local W=0x47;local X=0x48;local Y=0x49;local Z=0x4A;local _=200;local a0=2;local a1=3;local a2=4;local a3=5;local a4=a0;

local function a5(a6)

local a7={}

a7[1]=tostring(a6.values[1]..'Pi')
a7[2]=1+bit32.rshift(a6.values[2],3) --band
a7[3]=tostring(1+bit32.band(a6.values[2],0x07))..a6.values[1]..a6.values[2] --channel 1=3 2=34
a7[4]=tostring(bit32.lshift(a6.values[3],8)+a6.values[4])..a6.values[3]..'-'..a6.values[4] --min 3=0 4=25
a7[5]=tostring(bit32.lshift(a6.values[5],8)+a6.values[6])..a6.values[5]..'-'..a6.values[6] --max 5=2 6=88

a6.values=a7 
end;local function a8(a9)local C={}C[1]=bit32.band(a9[1],0xFF)C[2]=bit32.band((a9[2]-1)*8+a9[3]-1,0xFF)C[3]=bit32.band(bit32.rshift(a9[4],8),0xFF)C[4]=bit32.band(a9[4],0xFF)C[5]=bit32.band(bit32.rshift(a9[5],8),0xFF)C[6]=bit32.band(a9[5],0xFF)return C end;local function aa(a6)local ab={}ab[1]=a6.values[3]+1;ab[2]=bit32.lshift(a6.values[4],8)+a6.values[5]ab[3]=bit32.lshift(a6.values[6],8)+a6.values[7]ab[4]=a6.values[8]+1;ab[5]=bit32.lshift(a6.values[9],8)+a6.values[10]ab[6]=bit32.lshift(a6.values[11],8)+a6.values[12]ab[7]=a6.values[1]+1;ab[8]=a6.values[2]a6.values=ab end;local function ac(a9)local C={}C[1]=bit32.band(a9[7]-1,0xFF)C[2]=bit32.band(a9[8],0xFF)C[3]=bit32.band(a9[1]-1,0xFF)C[4]=bit32.band(bit32.rshift(a9[2],8),0xFF)C[5]=bit32.band(a9[2],0xFF)C[6]=bit32.band(bit32.rshift(a9[3],8),0xFF)C[7]=bit32.band(a9[3],0xFF)C[8]=bit32.band(a9[4]-1,0xFF)C[9]=bit32.band(bit32.rshift(a9[5],8),0xFF)C[10]=bit32.band(a9[5],0xFF)C[11]=bit32.band(bit32.rshift(a9[6],8),0xFF)C[12]=bit32.band(a9[6],0xFF)return C end;local function ad(a6)local ae={}for t=0,2 do ae[t*3+1]=bit32.lshift(a6.values[t*6+1],8)+a6.values[t*6+2]ae[t*3+2]=bit32.lshift(a6.values[t*6+3],8)+a6.values[t*6+4]ae[t*3+3]=bit32.lshift(a6.values[t*6+5],8)+a6.values[t*6+6]end;a6.values=ae end;local function af(a9)local C={}local ag;for t=0,2 do C[t*6+1]=bit32.rshift(a9[t*3+1],8)C[t*6+2]=bit32.band(a9[t*3+1],0xFF)C[t*6+3]=bit32.rshift(a9[t*3+2],8)C[t*6+4]=bit32.band(a9[t*3+2],0xFF)C[t*6+5]=bit32.rshift(a9[t*3+3],8)C[t*6+6]=bit32.band(a9[t*3+3],0xFF)end;return C end;local function ah(a6)local ai={}for t=1,9 do ai[t]=bit32.lshift(a6.values[(t-1)*2+1],8)+a6.values[(t-1)*2+2]end;a6.values=ai end;local function aj(a9)local C={}for t=1,9 do C[(t-1)*2+1]=bit32.rshift(a9[t],8)C[(t-1)*2+2]=bit32.band(a9[t],0xFF)end;return C end;local function ak(a6)local al={}al[1]=100*(bit32.lshift(a6.values[1],8)+a6.values[2])al[2]=bit32.lshift(a6.values[3],8)+a6.values[4]a6.values=al end;local function am(a9)local C={}local ag=bit32.band(math.floor(a9[1]/100),0xFFFF)C[1]=bit32.band(bit32.rshift(ag,8),0xFF)C[2]=bit32.band(ag,0xFF)C[3]=bit32.band(bit32.rshift(a9[2],8),0xFF)C[4]=bit32.band(a9[2],0xFF)return C end;local an="TARANIS"SetupPages={{title="PIDs",text={{t="P",x=60,y=14},{t="I",x=120,y=14},{t="D",x=175,y=14},{t="Roll",x=10,y=25},{t="Pitch",x=10,y=38},{t="Yaw",x=10,y=50}},fields={{x=35,y=25,i=1,max=65000,prec=2},{x=90,y=25,i=2,max=65000,prec=3},{x=145,y=25,i=3,max=65000,prec=2},{x=35,y=38,i=4,max=65000,prec=2},{x=90,y=38,i=5,max=65000,prec=3},{x=145,y=38,i=6,max=65000,prec=2},{x=35,y=50,i=7,max=65000,prec=2},{x=90,y=50,i=8,max=65000,prec=3},{x=145,y=50,i=9,max=65000,prec=2}},read=S,write=T,postRead=ad,getWriteValues=af},{title="Rates",text={{t="RC Rate",x=45,y=14},{t="Rate",x=107,y=14},{t="RC Curve",x=150,y=14},{t="Roll",x=10,y=25},{t="Pitch",x=10,y=38},{t="Yaw",x=10,y=50}},fields={{x=35,y=25,i=1,max=65000,prec=2},{x=90,y=25,i=2,max=65000,prec=2},{x=145,y=25,i=3,max=65000,prec=2},{x=35,y=38,i=4,max=65000,prec=2},{x=90,y=38,i=5,max=65000,prec=2},{x=145,y=38,i=6,max=65000,prec=2},{x=35,y=50,i=7,max=65000,prec=2},{x=90,y=50,i=8,max=65000,prec=2},{x=145,y=50,i=9,max=65000,prec=2}},read=Q,write=R,postRead=ah,getWriteValues=aj},{title="Filters",text={{t="Center",x=100,y=14},{t="Cutoff",x=150,y=14},{t="Notch Filter",x=10,y=14},{t="Roll",x=10,y=25},{t="Pitch",x=10,y=38},{t="LPF",x=10,y=52},{t="Yaw",x=110,y=52}},fields={{x=35,y=25,i=1,min=1,max=2,table={"Off","On"}},{x=90,y=25,i=2,min=0,max=490},{x=145,y=25,i=3,min=0,max=490},{x=35,y=38,i=4,min=1,max=2,table={"Off","On"}},{x=90,y=38,i=5,min=0,max=490},{x=145,y=38,i=6,min=0,max=490},{x=35,y=52,i=7,min=1,max=7,table={"Off","High","Med. High","Medium","Med. Low","Low","Very Low"}},{x=145,y=52,i=8,min=0,max=97}},read=W,write=X,postRead=aa,getWriteValues=ac},{title="Alarms",text={},fields={{t="VBat",x=15,y=25,sp=30,i=1,min=0,max=26000,prec=1},{t="mAH",x=120,y=25,sp=30,i=2,min=0,max=26000,inc=10}},read=Y,write=Z,postRead=ak,getWriteValues=am},{title="VTX",text={},fields={{t="Band",x=15,y=25,sp=60,i=2,min=1,max=5,table={"A","B","E","FS","RB"}},{t="Channel",x=110,y=25,sp=70,i=3,min=1,max=8},{t="Low Power",x=15,y=38,sp=60,i=4,min=0,max=600},{t="High Power",x=110,y=38,sp=70,i=5,min=0,max=600}},read=U,write=V,postRead=a5,getWriteValues=a8}}local ao=function(ap,aq)lcd.drawScreenTitle('Kiss Setup:  '..ap,aq,#SetupPages)end;local ar=function()lcd.drawText(75,55,"No telemetry",BLINK)end;local as=function()lcd.drawFilledRectangle(40,12,120,30,ERASE)lcd.drawRectangle(40,12,120,30,SOLID)lcd.drawText(64,18,"Saving...",DBLSIZE+BLINK)end;local function at(au,av)local aw=40;local ax=12;local ay=120;local az=#au*8+6;lcd.drawFilledRectangle(aw,ax,ay,az,ERASE)lcd.drawRectangle(aw,ax,ay-1,az-1,SOLID)lcd.drawText(aw+4,ax+3,"Menu:")for t,aA in ipairs(au)do if av==t then lcd.drawText(aw+36,ax+(t-1)*8+3,aA.t,INVERS)else lcd.drawText(aw+36,ax+(t-1)*8+3,aA.t)end end end;local function aB()return 0 end;local aC=bit32.bor(bit32.band(EVT_MENU_BREAK,0x1f),0x80)local aq=1;local aD=1;local aE=0;local aF=0;local aG=0;local aH=0;local function aI(aJ)local a6=SetupPages[aq]if a6.values then if a6.getWriteValues then E(a6.write,a6.getWriteValues(a6.values))else E(a6.write,a6.values)end;aE=getTime()if a4==a2 then aG=aG+1 else a4=a2;aG=0;aH=a6.saveMaxRetries or 2;aF=a6.saveTimeout or 400 end end end;local function aK()for t=1,#SetupPages do local a6=SetupPages[t]a6.values=nil end;a4=a0;aE=0 end;local au={{t="save page",f=aI},{t="reload",f=aK}}local aL=false;local av=false;local function aM(F,aN)if F==nil or aN==nil then return end;local a6=SetupPages[aq]if F==a6.write then a4=a0;a6.values=nil;aE=0;return end;if F~=a6.read then return end;if#aN>0 then a6.values={}for t=1,#aN do a6.values[t]=aN[t]end;if a6.postRead~=nil then a6.postRead(a6)end end end;local function aO()return#SetupPages[aq].fields end;local function aP(aQ)aq=aq+aQ;if aq>#SetupPages then aq=1 elseif aq<1 then aq=#SetupPages end;aD=1 end;local function aR(aQ)aD=aD+aQ;if aD>aO()then aD=1 elseif aD<1 then aD=aO()end end;local function aS(aQ)av=av+aQ;if av>#au then av=1 elseif av<1 then av=#au end end;local function aT(a6)if a6.read and(a6.reqTS==nil or a6.reqTS+_<=getTime())then a6.reqTS=getTime()E(a6.read,{})end end;local function aU(a6,aV)local ap=a6.title;ao(ap,aq)for t=1,#a6.text do local aW=a6.text[t]if aW.to==nil then lcd.drawText(aW.x,aW.y,aW.t,aB())else lcd.drawText(aW.x,aW.y,aW.t,aW.to)end end;if a6.lines~=nil then for t=1,#a6.lines do local aW=a6.lines[t]lcd.drawLine(aW.x1,aW.y1,aW.x2,aW.y2,SOLID,FORCE)end end;for t=1,#a6.fields do local aW=a6.fields[t]local aX=aB()if t==aD then aX=INVERS;if a4==a1 then aX=aX+BLINK end end;local aY=20;if aW.t~=nil then lcd.drawText(aW.x,aW.y,aW.t..":",aB())end;if aW.sp~=nil then aY=aW.sp end;local I=aW.i or t;if a6.values and a6.values[I]then local aZ=a6.values[I]if aW.table and aW.table[a6.values[I]]then aZ=aW.table[a6.values[I]]end;if aW.prec~=nil then aZ=i(aZ,aW.prec,aW.base)end;lcd.drawText(aW.x+aY,aW.y,aZ,aX)else lcd.drawText(aW.x+aY,aW.y,"---",aX)end end;if a6.customDraw~=nil then a6.customDraw()end end;local function a_(aZ,b0,b1)if aZ<b0 then aZ=b0 elseif aZ>b1 then aZ=b1 end;return aZ end;local function b2()local a6=SetupPages[aq]return a6.fields[aD]end;local function b3(aQ)local a6=SetupPages[aq]local b4=a6.fields[aD]local I=b4.i or aD;local b5=aQ;if b4.prec~=nil then b5=b5*10^(3-b4.prec)end;if b4.inc~=nil then b5=b5*b4.inc end;a6.values[I]=a_(a6.values[I]+b5,b4.min or 0,b4.max or 255)end;local b6=0;local function b7(b8)local b9=getTime()if b6+50<b9 then aK()end;b6=b9;if a4==a2 and aE+aF<b9 then if aG<aH then aI()else a4=a0;aK()end end;if#u>0 then D()end;if b8==aC then av=1;a4=a3 elseif EVT_PAGEUP_FIRST and b8==EVT_ENTER_LONG then av=1;killEnterBreak=1;a4=a3 elseif a4==a3 then if b8==EVT_EXIT_BREAK then a4=a0 elseif b8==EVT_PLUS_BREAK or b8==EVT_ROT_LEFT then aS(-1)elseif b8==EVT_MINUS_BREAK or b8==EVT_ROT_RIGHT then aS(1)elseif b8==EVT_ENTER_BREAK then if an=="HORUS"then if killEnterBreak==1 then killEnterBreak=0 else a4=a0;au[av].f()end else a4=a0;au[av].f()end end elseif a4<=a0 then if b8==EVT_PAGEUP_FIRST then aP(-1)elseif b8==EVT_MENU_BREAK or b8==EVT_PAGEDN_FIRST then aP(1)elseif b8==EVT_PLUS_BREAK or b8==EVT_ROT_LEFT then aR(-1)elseif b8==EVT_MINUS_BREAK or b8==EVT_ROT_RIGHT then aR(1)elseif b8==EVT_ENTER_BREAK then local a6=SetupPages[aq]local b4=a6.fields[aD]local I=b4.i or aD;if a6.values and a6.values[I]and b4.ro~=true then a4=a1 end end elseif a4==a1 then if b8==EVT_EXIT_BREAK or b8==EVT_ENTER_BREAK then a4=a0 elseif b8==EVT_PLUS_FIRST or b8==EVT_ROT_RIGHT then b3(1)elseif b8==EVT_PLUS_REPT then b3(10)elseif b8==EVT_MINUS_FIRST or b8==EVT_ROT_LEFT then b3(-1)elseif b8==EVT_MINUS_REPT then b3(-10)end end;local a6=SetupPages[aq]local aV=false;if not a6.values then aT(a6)aV=true end;lcd.clear()aU(a6,aV)if h()~=true then ar()aK()end;if a4==a3 then at(au,av)elseif a4==a2 then as()end;aM(N())return 0 end;return{run=b7}
